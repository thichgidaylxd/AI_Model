"""
AI Vehicle Classification App
·ª®ng d·ª•ng ph√¢n lo·∫°i xe c·ªô s·ª≠ d·ª•ng MobileNetV2
Ch·∫°y v·ªõi: streamlit run app.py
"""

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import os
import sys
from pathlib import Path

# Th√™m path hi·ªán t·∫°i
current_dir = Path(__file__).parent.absolute()
sys.path.append(str(current_dir))

# ===== C·∫§U H√åNH TRANG =====
st.set_page_config(
    page_title="üöó AI Ph√¢n Lo·∫°i Xe C·ªô",
    page_icon="üöó",
    layout="centered",
    initial_sidebar_state="collapsed",
    menu_items={
        'Get Help': 'https://github.com/your-repo',
        'Report a bug': 'https://github.com/your-repo/issues',
        'About': "·ª®ng d·ª•ng AI ph√¢n lo·∫°i xe c·ªô s·ª≠ d·ª•ng MobileNetV2"
    }
)

# ===== CSS STYLING =====
def load_css():
    """Load custom CSS"""
    st.markdown("""
    <style>
        /* Import Google Fonts */
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');
        
        /* Global styles */
        .main {
            font-family: 'Poppins', sans-serif;
        }
        
        /* Header */
        .main-header {
            text-align: center;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 3.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            animation: fadeInDown 1s ease-out;
        }
        
        /* Subtitle */
        .subtitle {
            text-align: center;
            font-size: 1.3rem;
            color: #7f8c8d;
            margin-bottom: 2rem;
            font-weight: 300;
        }
        
        /* Prediction box */
        .prediction-box {
            background: linear-gradient(135deg, #f1f2f6, #ddd6fe);
            padding: 2.5rem;
            border-radius: 25px;
            text-align: center;
            margin: 2rem 0;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            animation: slideInUp 0.8s ease-out;
        }
        
        .prediction-text {
            font-size: 3rem;
            font-weight: 700;
            margin: 1rem 0;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        
        .confidence-text {
            font-size: 1.8rem;
            color: #7f8c8d;
            font-weight: 400;
        }
        
        /* Animations */
        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* File uploader styling */
        .stFileUploader > div > div > div {
            border: 2px dashed #3498db !important;
            border-radius: 15px !important;
            padding: 20px !important;
        }
        
        /* Metrics styling */
        .metric-container {
            background: white;
            padding: 1rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            text-align: center;
        }
        
        /* Hide Streamlit elements */
        #MainMenu {visibility: hidden;}
        header {visibility: hidden;}
        footer {visibility: hidden;}
        .stDeployButton {display: none;}
    </style>
    """, unsafe_allow_html=True)

# ===== LOAD MODEL =====
@st.cache_resource
def load_vehicle_model():
    """
    Load m√¥ h√¨nh ph√¢n lo·∫°i xe c·ªô
    Returns:
        model: TensorFlow model ho·∫∑c None n·∫øu l·ªói
    """
    model_path = Path("vehicle_model.h5")
    
    if not model_path.exists():
        st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh: {model_path}")
        st.error("üìÅ Vui l√≤ng copy file 'vehicle_model.h5' v√†o th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n")
        st.info(f"üìç Th∆∞ m·ª•c hi·ªán t·∫°i: {current_dir}")
        return None
    
    try:
        with st.spinner("üîÑ ƒêang load m√¥ h√¨nh..."):
            # Create base model
            base_model = tf.keras.applications.MobileNetV2(
                input_shape=(224, 224, 3),
                include_top=False,
                weights='imagenet'
            )
            base_model.trainable = False
            
            # Create new model
            inputs = tf.keras.Input(shape=(224, 224, 3))
            x = base_model(inputs)
            x = tf.keras.layers.GlobalAveragePooling2D()(x)
            outputs = tf.keras.layers.Dense(3, activation='softmax')(x)
            
            model = tf.keras.Model(inputs=inputs, outputs=outputs)
            
            # Load weights
            model.load_weights(str(model_path))
            
        st.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng!")
        return model
    except Exception as e:
        st.error(f"‚ùå L·ªói khi load m√¥ h√¨nh: {e}")
        return None

# ===== IMAGE PREPROCESSING =====
def preprocess_image(image: Image.Image) -> tuple:
    """
    X·ª≠ l√Ω ·∫£nh tr∆∞·ªõc khi d·ª± ƒëo√°n
    
    Args:
        image: PIL Image object
        
    Returns:
        tuple: (processed_array, resized_image) ho·∫∑c (None, None) n·∫øu l·ªói
    """
    try:
        # Convert to RGB if needed
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Resize to model input size
        image_resized = image.resize((224, 224))
        
        # Convert to numpy array and normalize
        img_array = np.array(image_resized, dtype=np.float32) / 255.0
        img_array = np.expand_dims(img_array, axis=0)
        
        return img_array, image_resized
        
    except Exception as e:
        st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
        return None, None

# ===== PREDICTION =====
def predict_vehicle(model, img_array: np.ndarray) -> np.ndarray:
    """
    Th·ª±c hi·ªán d·ª± ƒëo√°n
    
    Args:
        model: TensorFlow model
        img_array: Processed image array
        
    Returns:
        prediction: Array d·ª± ƒëo√°n ho·∫∑c None n·∫øu l·ªói
    """
    try:
        with st.spinner("ü§ñ AI ƒëang ph√¢n t√≠ch..."):
            prediction = model.predict(img_array, verbose=0)
        return prediction
    except Exception as e:
        st.error(f"‚ùå L·ªói khi d·ª± ƒëo√°n: {e}")
        return None

# ===== DISPLAY RESULTS =====
def display_prediction_results(prediction: np.ndarray) -> tuple:
    """
    Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
    
    Args:
        prediction: Array k·∫øt qu·∫£ d·ª± ƒëo√°n
        
    Returns:
        tuple: (predicted_idx, confidence, class_probs)
    """
    # Class information
    class_info = {
        'names': ['√î t√¥', 'Xe m√°y', 'Xe t·∫£i'],
        'icons': ['üöó', 'üèçÔ∏è', 'üöõ'],
        'colors': ['#3498db', '#e74c3c', '#f39c12']
    }
    
    # Get prediction results
    predicted_idx = np.argmax(prediction)
    confidence = float(np.max(prediction)) * 100
    predicted_class = class_info['names'][predicted_idx]
    predicted_icon = class_info['icons'][predicted_idx]
    
    # Determine status and color
    if confidence > 85:
        color, status = '#27ae60', 'R·∫•t ch√≠nh x√°c üéØ'
    elif confidence > 70:
        color, status = '#f39c12', 'Kh√° ch√≠nh x√°c üëç'
    elif confidence > 50:
        color, status = '#e67e22', 'T·∫°m ch·∫•p nh·∫≠n ‚ö†Ô∏è'
    else:
        color, status = '#e74c3c', 'Kh√¥ng ch·∫Øc ch·∫Øn ‚ùì'
    
    # Display main result
    st.markdown(f"""
    <div class="prediction-box">
        <h2>üéØ K·∫øt Qu·∫£ D·ª± ƒêo√°n</h2>
        <div class="prediction-text" style="color: {color};">
            {predicted_icon} {predicted_class}
        </div>
        <div class="confidence-text">
            <strong>{confidence:.1f}%</strong> - {status}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    return predicted_idx, confidence, prediction[0], class_info

# ===== VISUALIZATION =====
def create_confidence_chart(prediction_probs: np.ndarray, class_info: dict) -> plt.Figure:
    """
    T·∫°o bi·ªÉu ƒë·ªì confidence
    
    Args:
        prediction_probs: Array x√°c su·∫•t d·ª± ƒëo√°n
        class_info: Dictionary th√¥ng tin class
        
    Returns:
        matplotlib.Figure: Bi·ªÉu ƒë·ªì
    """
    fig, ax = plt.subplots(figsize=(12, 7))
    
    confidences = prediction_probs * 100
    
    # Create bars
    bars = ax.bar(
        class_info['names'], 
        confidences, 
        color=class_info['colors'],
        alpha=0.8,
        edgecolor='black',
        linewidth=2
    )
    
    # Customize chart
    ax.set_title('üìä Ph√¢n T√≠ch ƒê·ªô Tin C·∫≠y Chi Ti·∫øt', 
                fontsize=18, fontweight='bold', pad=25)
    ax.set_ylabel('X√°c su·∫•t (%)', fontsize=14, fontweight='600')
    ax.set_ylim(0, 105)
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    
    # Add value labels on bars
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 2,
               f'{height:.1f}%\n{class_info["icons"][i]}',
               ha='center', va='bottom', 
               fontweight='bold', fontsize=12)
    
    # Style improvements
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_linewidth(2)
    ax.spines['bottom'].set_linewidth(2)
    
    plt.tight_layout()
    return fig

# ===== MAIN APPLICATION =====
def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    # Load CSS
    load_css()
    
    # Header
    st.markdown('<h1 class="main-header">üöó AI Ph√¢n Lo·∫°i Xe C·ªô üèçÔ∏è</h1>', unsafe_allow_html=True)
    st.markdown('''
    <div class="subtitle">
        ü§ñ S·ª≠ d·ª•ng MobileNetV2 ƒë·ªÉ nh·∫≠n di·ªán xe t·ª´ ·∫£nh<br>
        üìä H·ªó tr·ª£ ph√¢n lo·∫°i: <strong>√î t√¥</strong> ‚Ä¢ <strong>Xe m√°y</strong> ‚Ä¢ <strong>Xe t·∫£i</strong>
    </div>
    ''', unsafe_allow_html=True)
    
    # Load model
    model = load_vehicle_model()
    if model is None:
        st.stop()
    
    # Create layout
    col1, col2 = st.columns([1.2, 1])
    
    with col1:
        st.subheader("üì§ Upload ·∫¢nh Xe")
        
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh xe c·ªô ƒë·ªÉ ph√¢n lo·∫°i...",
            type=['jpg', 'jpeg', 'png', 'bmp', 'webp'],
            help="H·ªó tr·ª£: JPG, PNG, BMP, WebP. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 200MB",
            key="image_uploader"
        )
        
        if uploaded_file is not None:
            # Display original image
            image = Image.open(uploaded_file)
            st.image(
    image, 
    caption=f"üì∏ ·∫¢nh g·ªëc - {uploaded_file.name}", 
    use_container_width=True
)
            
            # Image info
            st.info(f"üìè K√≠ch th∆∞·ªõc: {image.size} | üìÅ Dung l∆∞·ª£ng: {len(uploaded_file.getvalue())/1024:.1f} KB")
    
    with col2:
        st.subheader("üîÆ K·∫øt Qu·∫£ AI")
        
        if uploaded_file is not None:
            # Process image
            img_array, image_resized = preprocess_image(image)
            
            if img_array is not None:
                # Show processed image
                st.image(
    image_resized, 
    caption="üñºÔ∏è ·∫¢nh ƒë√£ chu·∫©n h√≥a (224√ó224)", 
    use_container_width=True
)
                
                # Make prediction
                prediction = predict_vehicle(model, img_array)
                
                if prediction is not None:
                    # Display results
                    predicted_idx, confidence, class_probs, class_info = display_prediction_results(prediction)
                    
                    # Store results in session state for chart
                    st.session_state.prediction_results = {
                        'class_probs': class_probs,
                        'class_info': class_info,
                        'predicted_idx': predicted_idx,
                        'confidence': confidence
                    }
        else:
            st.info("üëÜ Upload ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch!")
    
    # Show detailed analysis if prediction exists
    if hasattr(st.session_state, 'prediction_results'):
        results = st.session_state.prediction_results
        
        st.markdown("---")
        st.subheader("üìä Ph√¢n T√≠ch Chi Ti·∫øt")
        
        # Chart
        fig = create_confidence_chart(results['class_probs'], results['class_info'])
        st.pyplot(fig)
        
        # Metrics
        st.subheader("üìà Th·ªëng K√™")
        col1, col2, col3 = st.columns(3)
        
        metrics_data = [
            ("üöó √î t√¥", results['class_probs'][0] * 100, 0),
            ("üèçÔ∏è Xe m√°y", results['class_probs'][1] * 100, 1),
            ("üöõ Xe t·∫£i", results['class_probs'][2] * 100, 2)
        ]
        
        for i, (col, (label, value, idx)) in enumerate(zip([col1, col2, col3], metrics_data)):
            with col:
                delta = "D·ª± ƒëo√°n ch√≠nh" if idx == results['predicted_idx'] else None
                st.metric(
                    label=label,
                    value=f"{value:.1f}%",
                    delta=delta
                )
        
        # Confidence interpretation
        confidence = results['confidence']
        if confidence > 85:
            st.success("üéâ **Xu·∫•t s·∫Øc!** AI r·∫•t t·ª± tin v·ªõi d·ª± ƒëo√°n n√†y.")
        elif confidence > 70:
            st.success("üëç **T·ªët!** D·ª± ƒëo√°n ƒë√°ng tin c·∫≠y.")
        elif confidence > 50:
            st.warning("‚ö†Ô∏è **Kh√° ·ªïn** nh∆∞ng n√™n ki·ªÉm tra th√™m.")
        else:
            st.error("‚ùì **Kh√¥ng ch·∫Øc ch·∫Øn.** Th·ª≠ ·∫£nh kh√°c v·ªõi ch·∫•t l∆∞·ª£ng t·ªët h∆°n.")
    
    # Sidebar information
    with st.sidebar:
        st.header("‚ÑπÔ∏è Th√¥ng Tin")
        st.markdown("""
        **ü§ñ M√¥ h√¨nh:** MobileNetV2 + Transfer Learning
        
        **üìä ƒê·ªô ch√≠nh x√°c:** ~95% tr√™n test set
        
        **‚ö° T·ªëi ∆∞u:** Nhanh & nh·∫π
        
        **üìù H∆∞·ªõng d·∫´n:**
        1. Upload ·∫£nh xe r√µ n√©t
        2. Ch·ªù AI ph√¢n t√≠ch
        3. Xem k·∫øt qu·∫£ chi ti·∫øt
        
        **üí° Tips:**
        - ·∫¢nh r√µ n√©t, g√≥c ch·ª•p t·ªët
        - Xe chi·∫øm ph·∫ßn l·ªõn khung h√¨nh
        - √Ånh s√°ng ƒë·ªß, kh√¥ng b·ªã m·ªù
        """)
        
        if st.button("üîÑ L√†m m·ªõi ·ª©ng d·ª•ng"):
            st.experimental_rerun()
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #7f8c8d; font-size: 0.9em; margin-top: 2rem;">
        üî¨ Ph√°t tri·ªÉn b·ªüi <strong>AI Team</strong> | 
        ‚ö° Powered by <strong>Streamlit</strong> & <strong>TensorFlow</strong><br>
        üìß G√≥p √Ω & b√°o l·ªói: <a href="mailto:contact@example.com">contact@example.com</a>
    </div>
    """, unsafe_allow_html=True)

# ===== RUN APP =====
if __name__ == "__main__":
    main()